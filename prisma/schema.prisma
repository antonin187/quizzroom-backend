// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(uuid())
  email     String   @unique
  name      String
  password  String // ðŸ‘ˆ ajout important
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Quizz {
  id        Int        @id @default(autoincrement())
  title     String
  subtitle  String?
  s3Key     String? // âœ… URL publique de l'image S3
  questions Question[]
  rooms Room[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
}

model Question {
  id          Int      @id @default(autoincrement())
  title       String
  media_s3Key String? // âœ… URL publique de l'image S3
  choices     String[]
  answerIndex Int

  // Relation Many-to-One vers Quizz
  quizzId Int?
  quizz   Quizz? @relation(fields: [quizzId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Room {
  id     Int    @id @default(autoincrement())
  code   String @unique
  status String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  players Player[]

  // Relation Many-to-One vers Quizz
  quizzId Int
  quizz   Quizz @relation(fields: [quizzId], references: [id])
}

model Player {
  id        Int      @id @default(autoincrement())
  name      String
  score     Int      @default(0)
  socketId  String? // optionnel, pour associer Ã  une socket active
  roomId    Int?
  room      Room?     @relation(fields: [roomId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
